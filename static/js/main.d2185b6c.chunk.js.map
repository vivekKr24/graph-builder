{"version":3,"sources":["components/Navbar.jsx","components/tree-components/matrix-row.jsx","components/tree-components/matrix.jsx","components/Tree.jsx","canvas.js","Nodes.js","components/TreeImage.jsx","components/Home.jsx","components/graph-components/drawArea.js","components/Graph.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavbarItem","text","link","onclick","className","onClick","exact","to","Navbar","style","backgroundColor","height","width","border","borderRadius","margin","defaulProps","console","log","MatrixRow","i","row","k","parseInt","checkboxHeight","window","innerHeight","checkboxWidth","innerWidth","push","fontFamily","textAlign","fontSize","color","display_","visibility","display","alignItems","justifyContent","id","toString","type","Matrix","matrix","flexDirection","tree","canvas","c","Tree","useState","matrixSize","setmatrixSize","CreateMatrix","nodes","document","querySelectorAll","adj","Array","fill","AdjMatrix","forEach","node","checked","a","Math","floor","b","min","max","localStorage","setItem","JSON","stringify","open","Node","x","y","data","nodeRadius","querySelector","getContext","this","radius","children","draw","colorNew","beginPath","arc","PI","fillStyle","stroke","font","fillText","closePath","scrollTo","top","behavior","GetNode","nodesArr","e","selection","index","clientX","getBoundingClientRect","clientY","selectedNode","MakeNodesDraggable","addEventListener","clearRect","ChildNode","moveTo","lineWidth","lineTo","RenderTree","parse","getItem","value","parseFloat","prompt","isNaN","leaveCount","depth","vertex","length","leaveX","InitVariables","root","currDepth","filter","CalculateNodePosition","curr","childCount","MatrixToTree","TreeImage","useEffect","Home","href","target","edgeStart","Graph","refreshCanvas","indexOf","shiftKey","parent","child","map","preventDefault","v","CreateDrawArea","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2185b6c.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction NavbarItem( {text, link, onclick} ){\n    var nb_Item = (\n        <div className = 'NavbarItem' onClick = {onclick}>\n            <NavLink exact to = { link }> { text } </NavLink>\n        </div>\n    )\n\n    return nb_Item\n}\n\nexport const Navbar = () => {\n    return (\n        <div className = 'Navbar'>\n            <NavbarItem text = 'HOME' link = '/'/>\n            <div style ={{ backgroundColor: 'white', height: 60, width: '1px', border: 'solid 2px white' ,borderRadius: 10, margin: '0 15px'}} ></div>\n            <NavbarItem text = 'SORTING ALGRITHMS' link = '/sorting-algorithms'/>\n            <NavbarItem text = 'MATRIX TO TREE' link = '/matrix-to-tree'/>\n            <NavbarItem text = 'GRAPH TO MATRIX' link = '/graph-to-matrix'/>\n        </div>\n    )\n}\n\nNavbarItem.defaulProps = {\n    text: \"link\",\n    link: '/',\n    onclick: () => {console.log( 'clicked', this.text)}\n}\n","export function MatrixRow( {i, text} ){\n    var row = [];\n    let k = parseInt(i);\n    let checkboxHeight = (window.innerHeight - 200) / i - 5;\n    let checkboxWidth = (window.innerWidth -500 )/ i - 5;\n\n    row.push(<p key='text' style={{ fontFamily: 'monospace', textAlign: 'center', width: checkboxWidth, fontSize: '1.2rem' }}> {text} </p>)\n    while (k--){\n        let color = k % 2 ? 'rgba(0, 255, 247, 0.1)' : 'rgba(0, 255, 0, 0.2)';\n        let display_ = (text === (i - k - 1)) ? 'hidden' : 'visible';\n        color = text === (i - k - 1) ? 'rgb(0, 0, 0 , 0.5)' : color;\n        row.push(\n            <div key={k} style = {{ borderRadius: '5px', visibility: display_, backgroundColor: color, width: checkboxWidth, height: checkboxHeight, display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n                <input  id = { text.toString() +  '_' + (i - k  - 1).toString() } type = 'checkbox' style={{ height: '80%', width:'80%', backgroundColor: color}}/>\n            </div> \n        ) \n    }\n    return(\n        <div className='MatrixRow' style = {{ display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n            {row}\n        </div>\n    )\n}","import { MatrixRow } from \"./matrix-row\";\n\nexport function Matrix( {i} ){\n    var matrix = [];\n    let k = i;\n    while (k--){\n        matrix.push(<MatrixRow text = {i - k - 1} i = {i} key = {k}/>)\n    }\n\n    return(\n        <div className='Matrix' style = {{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            {matrix}\n        </div>\n    )\n}\n\n\nexport function AdjMatrix(matrixSize){\n    let adj = new Array(matrixSize)\n    for(let i = 0; i < matrixSize; i++) {\n        adj[i] = new Array(matrixSize + 2)\n        adj[i].fill(0)\n    }\n    return adj\n}","import { useState } from 'react';\nimport React from 'react';\nimport {Matrix} from './tree-components/matrix'\nimport { AdjMatrix } from './tree-components/matrix';\n\n\nexport const Tree = () => {\n    const [matrixSize, setmatrixSize] = useState(2)\n    function info(){\n\n    }\n    function CreateMatrix(){\n        console.log('Running Go onclick')\n        var nodes = document.querySelectorAll('input');\n        let matrix = AdjMatrix(matrixSize)\n        nodes.forEach((node, i) => {\n            if(node.checked){\n                let a = Math.floor(i / matrixSize);\n                let b = i % matrixSize;\n                matrix[Math.min(a, b)][Math.max(a, b)] = 1;\n            } \n             \n        })\n\n        localStorage.setItem('matrix', JSON.stringify(matrix))\n        window.open('/tree-image')\n    }\n\n    return (\n        <div className='Tree'>\n            <div className = 'ButtonDiv'>\n                <button className='Button'> TEXT INPUT </button>\n                <button className='Button' onClick = {\n                    () => {if(matrixSize < 30) setmatrixSize(matrixSize + 1);\n                     else console.log('Use text input for more than 30 vertices')}\n                    }> ADD </button>\n                <button className='Button' onClick = {() => CreateMatrix()}> GO </button>\n                <button className='Button info' onClick = {() => info()}> i </button>\n            </div>\n            <Matrix i = {matrixSize}/>\n        </div>\n    )\n}\n","import {Node, GetNode} from './Nodes'\n\nlet tree // Adjecency Matrix for tree \nlet canvas\nlet c\nlet nodeRadius = 40\nlet nodes = []\nlet selectedNode = -1; // Current selected node index\n\n// Refresh canvas on every update\nfunction refreshCanvas(){\n    c.clearRect(0, 0, canvas.width, canvas.height)\n    nodes.forEach((a) => {\n        a.children.forEach((ChildNode) => {\n            c.beginPath()\n            c.moveTo(a.x, a.y);\n            c.lineWidth = 3;\n            c.lineTo(ChildNode.x, ChildNode.y);\n            c.stroke();\n            c.lineWidth = 1;\n            c.closePath();\n        })\n    })\n    nodes.forEach((node) => node.draw());\n}\n\n// Add listeners to enable dragging nodes\nfunction MakeNodesDraggable(){\n    canvas.addEventListener('mousedown', (e) => { selectedNode = GetNode(nodes, e) });\n    canvas.addEventListener('mousemove', (e) => {\n        if(selectedNode !== -1){\n            nodes[selectedNode].x = e.clientX - canvas.getBoundingClientRect().x\n            nodes[selectedNode].y = e.clientY - canvas.getBoundingClientRect().y\n            refreshCanvas();\n        }\n    })\n    canvas.addEventListener('mouseup', () => {\n        if(selectedNode !== -1) {\n            nodes[selectedNode].draw()\n            selectedNode = -1;   \n        }\n    })\n}\n\n// Enable editing of node data on double click\nfunction MakeNodeEditable(){\n    // Focus on canvas when mouse is inside the canvas region\n    canvas.addEventListener('mouseenter', \n        window.scrollTo({\n            top: canvas.getBoundingClientRect().y,\n            behavior: 'smooth'\n        })\n    )\n\n    // Edit nodes on double click\n    canvas.addEventListener('dblclick', (e) => {\n        selectedNode = GetNode(nodes, e);\n        if( selectedNode !== -1) {\n            let value = parseFloat(prompt('Enter node value: ', nodes[selectedNode].data));\n            if(!isNaN(value)){\n                nodes[selectedNode].draw(value);\n                nodes[selectedNode].data = value;\n            }\n            else{\n                console.log('Enter a valid number')\n            }\n        }\n        selectedNode = -1;\n    })\n}\n\nfunction MatrixToTree(){\n    /*\n        --------------------------------------------------------------------------------------------------------- \n        Pre-requisite functions \n        ---------------------------------------------------------------------------------------------------------\n    */\n    let leaveCount = 0; // Number of leaves for determining width of the tree\n    let depth = 0; // Height of the tree\n    let vertex = tree.length; // vertex = Number of vertices in the current tree, detemined from the adj matrix\n    let leaveX = 0; // number of leaf nodes currently placed\n\n    // Initialise leaveCount and depth variables to calculate dimensions of the tree\n    function InitVariables(root = 0, currDepth = 1){\n        if(tree[root].filter(node => node === 1).length === 0) {\n            leaveCount++;\n        }else for(let i = 0; i < vertex; i++){\n            if (tree[root][i] === 1){\n                tree[i][root] = 0;\n                InitVariables(i, currDepth + 1);\n                continue;\n            }\n        }\n        tree[root][vertex + 1] = currDepth;\n        depth = Math.max(currDepth, depth);\n    }\n\n\n    // Calculate the node radius to fit the tree in the canvas\n    //REDO\n    function getNodeRadius(){\n        nodeRadius = Math.min(10, \n            canvas.width / (leaveCount * 4),\n            canvas.height / depth);\n        if(nodeRadius < 0) {\n            console.log('Cant fit tree in canvas');\n            return;\n        }\n    }\n\n    // Calculate the position of each node based on it's depth and leaveX or child positions\n    function CalculateNodePosition(curr = 0){\n        let childCount = 0; // Number of child nodes for the curr node\n        var children = []; // Array of nodes (Node object) of all child nodes\n        let x = 0; // Sum of x-coordinates of positons of all child nodes\n\n        for(let i = 0; i < vertex; i++){\n            if(tree[curr][i] === 1){\n                childCount++;\n                tree[i][curr] = 0; // To avoid the use of extra memory of <visited> array\n                CalculateNodePosition(i);\n                x += nodes[nodes.length - 1].x;\n                children.push(nodes[nodes.length - 1]);\n            }\n        }  \n        var a = null; // Denotes the current node\n        \n        // If the current node a is a leaf node\n        if(childCount === 0){ \n            leaveX++;\n            a = new Node((leaveX - 0.5) * canvas.width / leaveCount, (tree[curr][vertex + 1] - 0.5) * canvas.height / depth, tree[curr][vertex]);\n            nodes.push(a);\n        }\n        // If the current node a is not a leaf node\n        else{\n            a = new Node(x / childCount, (tree[curr][vertex + 1] - 0.5) * canvas.height / depth, tree[curr][vertex]);\n            a.children = children;\n            nodes.push(a);\n        }\n    }\n\n    // Connect every parent with their child node\n    function DrawEdge(){\n        nodes.forEach((a) => {\n            a.children.forEach((ChildNode) => {\n                c.beginPath();\n                c.moveTo(a.x, a.y);\n                c.lineTo(ChildNode.x, ChildNode.y);\n                c.stroke();\n                c.closePath();\n            })\n        })\n    }\n    \n    /*\n    ----------------------------------------------------------------------------------------\n        Calling all the pre-req functions to render the tree\n    ----------------------------------------------------------------------------------------\n    */\n\n    InitVariables();\n    getNodeRadius();\n    CalculateNodePosition();\n    DrawEdge();\n\n    // Draw all nodes\n    for(let i = 0; i < nodes.length; i++){\n        nodes[i].draw();\n    }\n}\n\nexport function RenderTree() {\n    tree = JSON.parse(localStorage.getItem('matrix')) // JSON stored in local storage from Tree.jsx::CreateMatrix()\n\n    canvas = document.querySelector('canvas');\n    c = canvas.getContext('2d');\n\n    // Set dimensions of canvas\n    canvas.width = 1500\n    canvas.height = 880\n   \n    MakeNodeEditable();\n    MakeNodesDraggable();\n    MatrixToTree();\n}","/*\n    Node object which is stored in nodes array\n*/\nexport  function Node(x, y, data = 0, color = '#9cc2ff', nodeRadius = 40,canvas = document.querySelector('canvas')){\n    var c = canvas.getContext('2d')\n    this.x = x;\n    this.y = y;\n    this.data = data; // Value of the node\n    this.radius = nodeRadius;\n    this.children = []; // Stores node object for all connected nodes (only children in tree)\n    this.draw = (data = this.data, colorNew = color) => {\n        c.beginPath();\n        c.arc(this.x, this.y, nodeRadius, 0, Math.PI * 2);\n        c.fillStyle = colorNew;\n        c.stroke();\n        c.fill();\n        c.font = '20px monospace'\n        c.fillStyle = 'black';\n        c.fillText(data, this.x - 15, this.y + 10)\n        c.closePath();\n        window.scrollTo({\n        top: window.innerHeight,\n        behavior: 'smooth'\n        });\n    }\n}\n\n/* \n    GetNode(): Check if a node from nodesArr was hit with the event e on canvas\n    return index of node in nodesArr\n*/\n\nexport function GetNode(nodesArr, e, canvas = document.querySelector('canvas')){\n    let selection = -1;\n    nodesArr.forEach((node, index) => {\n        if((e.clientX - canvas.getBoundingClientRect().x - node.x) * (e.clientX - canvas.getBoundingClientRect().x - node.x) + (e.clientY - canvas.getBoundingClientRect().y - node.y) * (e.clientY - canvas.getBoundingClientRect().y - node.y) < node.radius * node.radius) {\n            selection = index\n        }\n    });\n    return selection;\n}","import { RenderTree } from \"../canvas\"\nimport { useEffect } from \"react\"\n\nexport function TreeImage(){\n    useEffect(() => {\n        RenderTree()\n    })\n    return(\n        <div style = {{ display: \"flex\" , alignItems: 'center', justifyContent: \"center\", height: '100vh'}}>\n            <canvas style = {{}}></canvas>\n            <div style = {{ display: \"flex\", flexDirection: \"column\"}}>\n                <button className = \"Button\" style  = {{margin: 20}}>GET MATRIX</button>\n                <button className = \"Button\" style  = {{margin: 20}}>Run Algoritm</button>\n                <button className = \"Button\" style  = {{margin: 20}}>Copy Image</button>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n    return (\n        <div style = {{display: 'flex', flexDirection: 'column'}}>\n            <div style= {{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n                <a style = {{width: 'max-content'}}href=\"https://www.github.com/vivekKr24\" target> CREATOR WEBSITE </a>\n                <Link to=\"/help\" target> HELP </Link>       \n            </div>\n        </div>\n    )\n}\n\nfunction Logo(){\n    return(\n        <div>\n            <h1>GRAPH</h1>\n        </div>\n    )\n}","import {Node, GetNode} from '../../Nodes'\nlet nodes = [];\nlet matrix = []; // Adjecency matrix of the drawn graph\nlet edgeStart = -1; // = -1 unless a node is selected\nlet selectedNode = -1; // Index of the selected node\n/*\n----------------------------------------------------------------------------------------------------\nCreateDrawArea(): Initialises the canvas in Graph::Graph.jsx for drawing the graph data structure\n----------------------------------------------------------------------------------------------------\n*/\nexport function CreateDrawArea() {\n    let canvas = document.querySelector('canvas');  // Draw Area\n    let c = canvas.getContext('2d');\n    // Set Canvas Dimensions\n    canvas.width = window.innerWidth - 200;\n    canvas.height = Math.min(window.innerHeight - 100, 800);\n    \n    // Focus on canvas when mouse enter the canvas\n    canvas.addEventListener('mouseenter', (e) => {\n        window.scrollTo({\n            top: canvas.getBoundingClientRect().y,\n            behavior: 'smooth'\n        });\n    });\n\n    /*\n        Handles the click event\n        Selects the node hit with event e if shift key was held \n        Else deselect the selected node\n     */\n    canvas.addEventListener('click', e => {\n        if(e.shiftKey) {\n            if(edgeStart === -1) {\n                edgeStart = GetNode(nodes, e, canvas);\n                     \n            }\n            else if(GetNode(nodes, e, canvas) === -1) edgeStart = -1;\n            else {\n                let parent = edgeStart;\n                let child = GetNode(nodes, e, canvas);\n\n                if (parent !== -1 && child !== -1 && child !== parent ){\n                    edgeStart  = -1;\n                    c.moveTo(nodes[parent].x, nodes[parent].y);\n                    c.lineWidth = 3;\n                    c.lineTo(nodes[child].x, nodes[child].y);\n                    c.stroke();\n                    nodes[parent].children.push(nodes[child]);\n                    nodes[child].children.push(nodes[parent]);\n                    nodes[parent].draw();\n                    nodes[child].draw();\n                    matrix[child][parent]++;\n                    matrix[parent][child]++;\n                    console.log('Matrix updated to: ', matrix);\n                    edgeStart = -1;\n\n                }\n            }\n            if(edgeStart !== -1) nodes[edgeStart].draw(nodes[edgeStart].data, 'lightgreen');\n            else nodes.forEach(node => node.draw());\n        }\n    })\n\n\n    // Edit node if node hit by event e, else create new one\n    canvas.addEventListener('dblclick', (e) => {\n        if(!e.shiftKey){\n            selectedNode = GetNode(nodes, e);\n            if(selectedNode !== -1) {\n                let value = (prompt('Enter node value: ', nodes[selectedNode].data));\n                if(!isNaN(value)){\n                    nodes[selectedNode].data = value;\n                    nodes[selectedNode].draw();\n                }\n                else{\n                    console.log('Enter a valid number')\n                }\n            }else {\n                let value = parseFloat(prompt('Enter node value: ', nodes.length + 1));\n                if(!isNaN(value)){\n                    nodes.push(new Node(e.clientX - canvas.getBoundingClientRect().x, e.clientY - canvas.getBoundingClientRect().y))\n                    nodes[nodes.length - 1].data = value;\n                    nodes[nodes.length - 1].draw();\n                    matrix.map(node => node.push(0));\n                    matrix.push(new Array(nodes.length))\n                    matrix[matrix.length - 1].fill(0);\n                    console.log('Matrix updated to: ', matrix);\n                }\n                else{\n                    console.log('Enter a valid number')\n                }\n            }\n            selectedNode = -1;\n        }\n    })\n\n\n    // Redraw all nodes after every edit\n    function refreshCanvas(){\n        c.clearRect(0, 0, canvas.width, canvas.height)\n        if(nodes.length){\n            nodes.forEach((a, i) => {\n                a.children.forEach((ChildNode) => {\n                    c.beginPath()\n                    c.lineWidth = matrix[i][nodes.indexOf(ChildNode)];\n                    c.moveTo(a.x, a.y);\n                    c.lineTo(ChildNode.x, ChildNode.y);\n                    c.stroke();\n                    c.lineWidth = 1;\n                    c.closePath();\n                })\n            })\n            nodes.forEach((node) => node.draw());\n        }\n    }\n\n    // Event listener for hold and drag graph nodes\n    canvas.addEventListener('mousedown', (e) => { selectedNode = GetNode(nodes, e) });\n    canvas.addEventListener('mousemove', (e) => {\n        if(selectedNode !==-1){\n            nodes[selectedNode].x = e.clientX - canvas.getBoundingClientRect().x\n            nodes[selectedNode].y = e.clientY - canvas.getBoundingClientRect().y\n            refreshCanvas();\n        }\n    })\n    canvas.addEventListener('mouseup', () => {\n        if(selectedNode !== -1) {\n            nodes[selectedNode].draw()\n            selectedNode = -1;   \n        }\n    })    \n\n    // Delete selected node\n    canvas.addEventListener('contextmenu', (e) => {\n        if(selectedNode !== -1) {\n            e.preventDefault();\n            matrix[selectedNode].forEach((v, i) => {\n                if(v){\n                    matrix[i][selectedNode] = 0;\n                    nodes[i].children = nodes[i].children.filter((value, index) => value !== nodes[selectedNode]);\n                }\n            })\n            \n            nodes = nodes.filter((v, i) => i != selectedNode);\n            matrix.forEach((v, i) => {\n                matrix[i] = v.filter((value, index) => index !== selectedNode)\n            })\n\n            matrix = matrix.filter((v, i) => i !== selectedNode);\n            edgeStart = -1;\n            selectedNode = -1;\n            refreshCanvas();\n            console.log('Matrix updated to: ', matrix);\n            return false;\n        }\n        return true;\n    })    \n}","import React, { useEffect }from 'react'\nimport { CreateDrawArea } from './graph-components/drawArea';\n\nexport const Graph = () => {\n    useEffect(() => {\n        CreateDrawArea(document.querySelector('canvas'));\n    })\n    return (\n        <div style = {{display: 'flex', justifyContent:'center', alignItems:'center'}}>\n            <canvas></canvas>\n        </div>\n    )\n}\n","import './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Navbar} from './components/Navbar';\nimport {Tree} from './components/Tree'\nimport {TreeImage} from './components/TreeImage'\nimport {Home} from './components/Home'\nimport { Graph } from './components/Graph';\n\nfunction App() {\n  return (\n      <div className='App'>\n      <BrowserRouter>\n          <Navbar/>\n          <Switch>\n            <Route exact path = '/matrix-to-tree'>\n              <Tree />\n            </Route>\n            <Route exact path = '/graph-to-matrix'>\n              <Graph />\n            </Route>\n            <Route exact path = '/'>\n              <Home />\n            </Route>\n            <Route exact path = '/tree-image'>\n              <TreeImage />\n            </Route>\n            <Route exact path = '/help'>\n              <p>HELP</p>\n            </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}